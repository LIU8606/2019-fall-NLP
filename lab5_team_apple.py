# -*- coding: utf-8 -*-
"""lab5_Team_Apple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15lhyw5kwhSVxodIlx_p_PcaFH-BsX_zf

# Part 1
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer
from sklearn.naive_bayes import GaussianNB, MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from collections import Counter,defaultdict
import json
import requests

data = pd.read_json('https://nlp-apple-2020.imfast.io/public_phases_1_2/train_gold.json', lines=True)

train_data, test_data = train_test_split(data, test_size=0.1, random_state=43)

train_data

def Num_of_sample(train_data):
  categories = train_data["categories"].to_list()
  counts = defaultdict(lambda:0)
  for category in categories:
    counts[len(category)] +=1

  return counts

sample_counts = Num_of_sample(train_data)
for N in range(1,7,1):
  print("{} of samples have {} categories.\n".format(sample_counts[N],N))

def category_distribution(train_data):
  categories = train_data["categories"].to_list()
  counts = Counter()
  for c in categories:
    counts.update(c)

  return counts

category_count = category_distribution(train_data).most_common()
category_count

def common_pairs(train_data):
  counts = defaultdict(lambda:0)
  categories = train_data["categories"].to_list()
  for c in categories:
    counts[str(c)] +=1

  num = []
  categories_list = []
  for c in counts:
    num.append(counts[c])
    categories_list.append(c)

  return np.argsort(num),categories_list

num_index ,categories_list =  common_pairs(train_data)
co_category =  [categories_list[index] for index in num_index[::-1][:10]]
for c in co_category:
  print(c)

"""# Part 2

## majority prediction
"""

predict = [category[0] for category in category_count[:6]]
predict

import json

df = pd.read_json("https://nlp-apple-2020.imfast.io/public_phases_1_2/dev_unlabeled.json", lines=True)

data = dict()
data['data'] = []
key = ["idx", "categories", "reply", "text"] 
f = open('dev.json','w')
for index in range(len(df)):
  data_json = dict.fromkeys(key, None)
  data_json["idx"] = int(df.idx[index])
  data_json["categories"] = predict
  data_json["reply"] = df.reply[index]
  data_json["text"] = df.text[index]
  f.write(json.dumps(data_json))
  f.write('\n')
  data['data'].append(data_json)
f.close()

"""## Converting text to vectors (vectorizing)"""

vectorizer = TfidfVectorizer() # using default parameters
vectorizer.fit(train_data['text'])
train_X = vectorizer.transform(train_data['text'])

"""## Multiclass Classification Using Naive Bayes

### Training
"""

# The following is done for simplification
train_y = [categories[0] for categories in train_data['categories'].to_list()]

model = MultinomialNB()
model.fit(train_X.toarray(),train_y)

"""### Testing"""

CATEGORIES = model.classes_
def get_cate(preds):
  categories = []
  for pred in preds:
    pred_top_six = pred.argsort()[-6:][::-1]
    categories.append([ CATEGORIES[i] for i in pred_top_six ])
  return categories

import zipfile
def dev_test(data):
  df = pd.DataFrame(data) # 轉成pandas的dataframe
  df.info() # 查看欄位等相關資訊
  df1 = df[['idx', 'text', 'reply']] # 挑選所要分析的欄位
  df1.head() # 查看前5筆資訊
  
  D_test = df1[['text', 'reply']]
  # 使用測試集來進行模型評估
  test_X = vectorizer.transform(D_test['text']) 
  preds = model.predict_proba(test_X.toarray())
  # OUTPUT JSON 
  # {"idx": 32, "categories": ["eye_roll", "facepalm", "fist_bump", "good_luck", "popcorn", "happy_dance"], "reply": "Ouch!", "text": "Fell right under my trap"}
  categories = get_cate(preds)
  df['categories'] = categories
  # output json file
  df.to_json(r'dev.json', orient='records', lines=True)
  # zip file
  with zipfile.ZipFile('dev.zip', 'w') as zf:
    zf.write('dev.json')
  return

test_data = pd.read_json("https://nlp-apple-2020.imfast.io/public_phases_1_2/dev_unlabeled.json", lines=True)
dev_test(test_data)