# -*- coding: utf-8 -*-
"""lab4_Team_Apple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JRp-28uU2b1YSM9YWz6cJ4mA5eq7lA9q

#Link to my google drive
Set the current path to My Drive/Fast.io/nlp_hw4.imfast.io

Since I have already linked the nlp_hw4.imfast.io fold in my drive to the fast.io, every file I wrote will save in My Drive/Fast.io/nlp_hw4.imfast.io and upload to fast.io automatically.
"""

import os
from google.colab import drive
drive.mount('/content/drive')
os.chdir("/content/drive/My Drive/Fast.io/nlp_hw4.imfast.io") #更改路徑
os.getcwd() #查看當前路徑

"""#Read data"""

import pandas as pd
  df = pd.read_csv("/content/drive/My Drive/Fast.io/nlp_hw4.imfast.io/lab4-data.csv") 
  print("Dataset columns", df.columns)
  print("Dataset size", len(df))
  idx = df.idx.to_list()
  text = df.text.to_list()

"""#Write HTML
I wrote the template.html and upload to my google drive first

Porduct other html by changing the tweet in the template.html
"""

f = open("/content/drive/My Drive/Fast.io/nlp_hw4.imfast.io/template.html")
lines =  f.read()
f.close()

for i in range(len(df)):
  filename = str(idx[i]) + ".html"
  new_lines = lines.replace("TITLE", text[i])
  new_lines = new_lines.replace("WORDNUM", str(len(text[i].split(" "))))
  f = open(filename,'w')
  f.write(new_lines)
  f.close()

"""# Authenticate"""

import boto3
import pandas as pd

CREDENTIALS_FILE = '/content/drive/My Drive/Fast.io/nlp_hw4.imfast.io/credentials.csv'
credentials = pd.read_csv(CREDENTIALS_FILE).to_dict('records')[0]
aws_access_key_id = credentials['Access key ID']
aws_secret_access_key = credentials['Secret access key']

region_name = 'us-east-1'
endpoint_url = 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'
 
client = boto3.client(
    'mturk',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    endpoint_url=endpoint_url,
    region_name=region_name
)

"""#Get  Balance"""

print(client.get_account_balance())

"""#Create HIT Type"""

one_minute = 60 # seconds
one_hour = 60 * one_minute
one_day = 24 * one_hour
one_week = 7 * one_day

hit_type_response_short = client.create_hit_type(
    AutoApprovalDelayInSeconds= one_hour,
    AssignmentDurationInSeconds=30 * one_minute,
    Reward='0.50',
    Title='Tweet Emotion Experiment',
    Keywords='NCTU,emotion,language',
    Description='Please choose the emotion mostly matching your feeling after reading the tweets.',
    QualificationRequirements=[
        {
            'QualificationTypeId': '00000000000000000071', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'In',
            'LocaleValues': [
                {
                    'Country': 'TW'
                },
                {
                    'Country': 'US'
                },
                {
                    'Country': 'CA'
                },
                {
                    'Country': 'IN'
                },
                {
                    'Country': 'AU'
                },
                {
                    'Country': 'NZ'
                }
            ],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
        {
            'QualificationTypeId': '00000000000000000060', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'EqualTo',
            'IntegerValues' : [1],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
    ]
)

hit_type_response_long = client.create_hit_type(
    AutoApprovalDelayInSeconds= one_hour,
    AssignmentDurationInSeconds=30 * one_minute,
    Reward='1.00',
    Title='Tweet Emotion Experiment',
    Keywords='NCTU,emotion,language',
    Description='Please choose the emotion mostly matching your feeling after reading the tweets.',
    QualificationRequirements=[
        {
            'QualificationTypeId': '00000000000000000071', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'In',
            'LocaleValues': [
                {
                    'Country': 'TW'
                },
                {
                    'Country': 'US'
                },
                {
                    'Country': 'CA'
                },
                {
                    'Country': 'IN'
                },
                {
                    'Country': 'AU'
                },
                {
                    'Country': 'NZ'
                }
            ],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
        {
            'QualificationTypeId': '00000000000000000060', # see https://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/ApiReference_QualificationRequirementDataStructureArticle.html#ApiReference_QualificationType-IDs
            'Comparator': 'EqualTo',
            'IntegerValues' : [1],
            'RequiredToPreview': True,
            'ActionsGuarded': 'PreviewAndAccept'
        },
    ]
)

hit_type_id_short = hit_type_response_short['HITTypeId']
hit_type_id_long = hit_type_response_long['HITTypeId']

import numpy as np
length = [len(t.split(" ")) for t in text ]
avgw = np.mean(length)

for i in range(len(df)):
  URL = "https://nlp_hw4.imfast.io/" + str(idx[i]) + ".html"
  question='''<?xml version="1.0" encoding="UTF-8"?>
  <ExternalQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2006-07-14/ExternalQuestion.xsd">
    <ExternalURL>'''+URL+'''</ExternalURL>
    <FrameHeight>800</FrameHeight>
  </ExternalQuestion>'''

  if length[i] <= avgw:
    response = client.create_hit_with_hit_type(
        HITTypeId=hit_type_id_short,
        MaxAssignments=3,
        LifetimeInSeconds= 8 * one_week,
        Question=question,
        RequesterAnnotation= str(idx[i]),
    )
  else:
    response = client.create_hit_with_hit_type(
        HITTypeId=hit_type_id_long,
        MaxAssignments=3,
        LifetimeInSeconds= 8 * one_week,
        Question=question,
        RequesterAnnotation= str(idx[i]),
    )

"""Fetch results"""

list_hits_response = client.list_hits()
 hit_id = list_hits_response['HITs'][0]
 response = client.list_assignments_for_hit(HITId=hit_id["HITId"])

hits_paginator = client.get_paginator('list_hits')
assignments_paginator = client.get_paginator('list_assignments_for_hit')

for hits in hits_paginator.paginate():
    for hit in hits['HITs']:
        for assignments in assignments_paginator.paginate(HITId=hit['HITId']):
            for assignment in assignments['Assignments']:
                print(assignment['Answer'])